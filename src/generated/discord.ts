// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: discord.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "discord";

export interface Empty {
}

export interface BotGuildList {
  guilds: BotGuild[];
}

export interface ChannelRequest {
  /** Snowflake */
  guildId: string;
}

export interface BotGuild {
  id: string;
  name: string;
  memberCount: number;
  ownerId: string;
  icon?: string | undefined;
  description?: string | undefined;
  createdAt: string;
}

export interface BotChannel {
  /** Snowflake */
  id: string;
  name: string;
  type: string;
  typeName: string;
  topic?: string | undefined;
}

export interface BotChannelList {
  channels: BotChannel[];
}

export interface SendMessageRequest {
  /** Snowflake */
  guildId: string;
  /** Snowflake */
  channelId: string;
  content: string;
}

export interface MessageResponse {
  success: boolean;
  message: string;
  messageId: string;
}

export interface DeleteMessageRequest {
  /** Snowflake */
  guildId: string;
  /** Snowflake */
  channelId: string;
  messageId: string;
}

export interface DeleteMessageResponse {
  success: boolean;
  message: string;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseBotGuildList(): BotGuildList {
  return { guilds: [] };
}

export const BotGuildList: MessageFns<BotGuildList> = {
  encode(message: BotGuildList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.guilds) {
      BotGuild.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotGuildList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotGuildList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guilds.push(BotGuild.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotGuildList {
    return {
      guilds: globalThis.Array.isArray(object?.guilds) ? object.guilds.map((e: any) => BotGuild.fromJSON(e)) : [],
    };
  },

  toJSON(message: BotGuildList): unknown {
    const obj: any = {};
    if (message.guilds?.length) {
      obj.guilds = message.guilds.map((e) => BotGuild.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotGuildList>, I>>(base?: I): BotGuildList {
    return BotGuildList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotGuildList>, I>>(object: I): BotGuildList {
    const message = createBaseBotGuildList();
    message.guilds = object.guilds?.map((e) => BotGuild.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChannelRequest(): ChannelRequest {
  return { guildId: "" };
}

export const ChannelRequest: MessageFns<ChannelRequest> = {
  encode(message: ChannelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildId !== "") {
      writer.uint32(10).string(message.guildId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelRequest {
    return { guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "" };
  },

  toJSON(message: ChannelRequest): unknown {
    const obj: any = {};
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelRequest>, I>>(base?: I): ChannelRequest {
    return ChannelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelRequest>, I>>(object: I): ChannelRequest {
    const message = createBaseChannelRequest();
    message.guildId = object.guildId ?? "";
    return message;
  },
};

function createBaseBotGuild(): BotGuild {
  return { id: "", name: "", memberCount: 0, ownerId: "", icon: undefined, description: undefined, createdAt: "" };
}

export const BotGuild: MessageFns<BotGuild> = {
  encode(message: BotGuild, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.memberCount !== 0) {
      writer.uint32(24).int32(message.memberCount);
    }
    if (message.ownerId !== "") {
      writer.uint32(34).string(message.ownerId);
    }
    if (message.icon !== undefined) {
      writer.uint32(42).string(message.icon);
    }
    if (message.description !== undefined) {
      writer.uint32(50).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotGuild {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotGuild();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.memberCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotGuild {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      memberCount: isSet(object.memberCount) ? globalThis.Number(object.memberCount) : 0,
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: BotGuild): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.memberCount !== 0) {
      obj.memberCount = Math.round(message.memberCount);
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.icon !== undefined) {
      obj.icon = message.icon;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotGuild>, I>>(base?: I): BotGuild {
    return BotGuild.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotGuild>, I>>(object: I): BotGuild {
    const message = createBaseBotGuild();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.memberCount = object.memberCount ?? 0;
    message.ownerId = object.ownerId ?? "";
    message.icon = object.icon ?? undefined;
    message.description = object.description ?? undefined;
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseBotChannel(): BotChannel {
  return { id: "", name: "", type: "", typeName: "", topic: undefined };
}

export const BotChannel: MessageFns<BotChannel> = {
  encode(message: BotChannel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.typeName !== "") {
      writer.uint32(34).string(message.typeName);
    }
    if (message.topic !== undefined) {
      writer.uint32(42).string(message.topic);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotChannel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotChannel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.typeName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.topic = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotChannel {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      typeName: isSet(object.typeName) ? globalThis.String(object.typeName) : "",
      topic: isSet(object.topic) ? globalThis.String(object.topic) : undefined,
    };
  },

  toJSON(message: BotChannel): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.typeName !== "") {
      obj.typeName = message.typeName;
    }
    if (message.topic !== undefined) {
      obj.topic = message.topic;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotChannel>, I>>(base?: I): BotChannel {
    return BotChannel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotChannel>, I>>(object: I): BotChannel {
    const message = createBaseBotChannel();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.typeName = object.typeName ?? "";
    message.topic = object.topic ?? undefined;
    return message;
  },
};

function createBaseBotChannelList(): BotChannelList {
  return { channels: [] };
}

export const BotChannelList: MessageFns<BotChannelList> = {
  encode(message: BotChannelList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.channels) {
      BotChannel.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotChannelList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotChannelList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channels.push(BotChannel.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotChannelList {
    return {
      channels: globalThis.Array.isArray(object?.channels)
        ? object.channels.map((e: any) => BotChannel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BotChannelList): unknown {
    const obj: any = {};
    if (message.channels?.length) {
      obj.channels = message.channels.map((e) => BotChannel.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotChannelList>, I>>(base?: I): BotChannelList {
    return BotChannelList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotChannelList>, I>>(object: I): BotChannelList {
    const message = createBaseBotChannelList();
    message.channels = object.channels?.map((e) => BotChannel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSendMessageRequest(): SendMessageRequest {
  return { guildId: "", channelId: "", content: "" };
}

export const SendMessageRequest: MessageFns<SendMessageRequest> = {
  encode(message: SendMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildId !== "") {
      writer.uint32(10).string(message.guildId);
    }
    if (message.channelId !== "") {
      writer.uint32(18).string(message.channelId);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMessageRequest {
    return {
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: SendMessageRequest): unknown {
    const obj: any = {};
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendMessageRequest>, I>>(base?: I): SendMessageRequest {
    return SendMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendMessageRequest>, I>>(object: I): SendMessageRequest {
    const message = createBaseSendMessageRequest();
    message.guildId = object.guildId ?? "";
    message.channelId = object.channelId ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseMessageResponse(): MessageResponse {
  return { success: false, message: "", messageId: "" };
}

export const MessageResponse: MessageFns<MessageResponse> = {
  encode(message: MessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.messageId !== "") {
      writer.uint32(26).string(message.messageId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
    };
  },

  toJSON(message: MessageResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageResponse>, I>>(base?: I): MessageResponse {
    return MessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageResponse>, I>>(object: I): MessageResponse {
    const message = createBaseMessageResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.messageId = object.messageId ?? "";
    return message;
  },
};

function createBaseDeleteMessageRequest(): DeleteMessageRequest {
  return { guildId: "", channelId: "", messageId: "" };
}

export const DeleteMessageRequest: MessageFns<DeleteMessageRequest> = {
  encode(message: DeleteMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildId !== "") {
      writer.uint32(10).string(message.guildId);
    }
    if (message.channelId !== "") {
      writer.uint32(18).string(message.channelId);
    }
    if (message.messageId !== "") {
      writer.uint32(26).string(message.messageId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMessageRequest {
    return {
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
    };
  },

  toJSON(message: DeleteMessageRequest): unknown {
    const obj: any = {};
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMessageRequest>, I>>(base?: I): DeleteMessageRequest {
    return DeleteMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMessageRequest>, I>>(object: I): DeleteMessageRequest {
    const message = createBaseDeleteMessageRequest();
    message.guildId = object.guildId ?? "";
    message.channelId = object.channelId ?? "";
    message.messageId = object.messageId ?? "";
    return message;
  },
};

function createBaseDeleteMessageResponse(): DeleteMessageResponse {
  return { success: false, message: "" };
}

export const DeleteMessageResponse: MessageFns<DeleteMessageResponse> = {
  encode(message: DeleteMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMessageResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: DeleteMessageResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMessageResponse>, I>>(base?: I): DeleteMessageResponse {
    return DeleteMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMessageResponse>, I>>(object: I): DeleteMessageResponse {
    const message = createBaseDeleteMessageResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

export type DiscordBotService = typeof DiscordBotService;
export const DiscordBotService = {
  getGuilds: {
    path: "/discord.DiscordBot/GetGuilds",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: BotGuildList) => Buffer.from(BotGuildList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BotGuildList.decode(value),
  },
  getChannels: {
    path: "/discord.DiscordBot/GetChannels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChannelRequest) => Buffer.from(ChannelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ChannelRequest.decode(value),
    responseSerialize: (value: BotChannelList) => Buffer.from(BotChannelList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BotChannelList.decode(value),
  },
  sendMessage: {
    path: "/discord.DiscordBot/SendMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendMessageRequest) => Buffer.from(SendMessageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendMessageRequest.decode(value),
    responseSerialize: (value: MessageResponse) => Buffer.from(MessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MessageResponse.decode(value),
  },
  deleteMessage: {
    path: "/discord.DiscordBot/DeleteMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteMessageRequest) => Buffer.from(DeleteMessageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteMessageRequest.decode(value),
    responseSerialize: (value: DeleteMessageResponse) => Buffer.from(DeleteMessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteMessageResponse.decode(value),
  },
} as const;

export interface DiscordBotServer extends UntypedServiceImplementation {
  getGuilds: handleUnaryCall<Empty, BotGuildList>;
  getChannels: handleUnaryCall<ChannelRequest, BotChannelList>;
  sendMessage: handleUnaryCall<SendMessageRequest, MessageResponse>;
  deleteMessage: handleUnaryCall<DeleteMessageRequest, DeleteMessageResponse>;
}

export interface DiscordBotClient extends Client {
  getGuilds(request: Empty, callback: (error: ServiceError | null, response: BotGuildList) => void): ClientUnaryCall;
  getGuilds(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BotGuildList) => void,
  ): ClientUnaryCall;
  getGuilds(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BotGuildList) => void,
  ): ClientUnaryCall;
  getChannels(
    request: ChannelRequest,
    callback: (error: ServiceError | null, response: BotChannelList) => void,
  ): ClientUnaryCall;
  getChannels(
    request: ChannelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BotChannelList) => void,
  ): ClientUnaryCall;
  getChannels(
    request: ChannelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BotChannelList) => void,
  ): ClientUnaryCall;
  sendMessage(
    request: SendMessageRequest,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  sendMessage(
    request: SendMessageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  sendMessage(
    request: SendMessageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MessageResponse) => void,
  ): ClientUnaryCall;
  deleteMessage(
    request: DeleteMessageRequest,
    callback: (error: ServiceError | null, response: DeleteMessageResponse) => void,
  ): ClientUnaryCall;
  deleteMessage(
    request: DeleteMessageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteMessageResponse) => void,
  ): ClientUnaryCall;
  deleteMessage(
    request: DeleteMessageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteMessageResponse) => void,
  ): ClientUnaryCall;
}

export const DiscordBotClient = makeGenericClientConstructor(DiscordBotService, "discord.DiscordBot") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): DiscordBotClient;
  service: typeof DiscordBotService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
